From d2c199dfee64c6d6cf280265766d74b80ff9c85e Mon Sep 17 00:00:00 2001
From: Marius Gripsgard <marius@ubports.com>
Date: Fri, 10 Jul 2020 00:05:02 +0200
Subject: [PATCH] [TMP] Allow old type buffers

---
 .../Unity/Application/mirbuffersgtexture.cpp  |  2 +
 src/platforms/mirserver/miral/mirbuffer.cpp   | 66 ++++++++++++++++++-
 src/platforms/mirserver/miral/mirbuffer.h     |  9 +++
 3 files changed, 74 insertions(+), 3 deletions(-)

diff --git a/src/modules/Unity/Application/mirbuffersgtexture.cpp b/src/modules/Unity/Application/mirbuffersgtexture.cpp
index e4671398..310053bd 100644
--- a/src/modules/Unity/Application/mirbuffersgtexture.cpp
+++ b/src/modules/Unity/Application/mirbuffersgtexture.cpp
@@ -72,6 +72,7 @@ int MirBufferSGTexture::textureId() const
     {
         GLint existing_binding;
         glGetIntegerv(GL_TEXTURE_BINDING_2D, &existing_binding);
+        m_mirBuffer.gl_bind_tex();
         m_mirBuffer.bind();
         glGetIntegerv(GL_TEXTURE_BINDING_2D, &m_textureId);
         glBindTexture(GL_TEXTURE_2D, existing_binding);
@@ -95,6 +96,7 @@ void MirBufferSGTexture::bind()
     QMutexLocker locker(&m_mutex);
 
     Q_ASSERT(hasBuffer());
+    m_mirBuffer.gl_bind_tex();
     updateBindOptions(true/* force */);
 
     m_mirBuffer.bind();
diff --git a/src/platforms/mirserver/miral/mirbuffer.cpp b/src/platforms/mirserver/miral/mirbuffer.cpp
index 0f649e0b..9f555478 100644
--- a/src/platforms/mirserver/miral/mirbuffer.cpp
+++ b/src/platforms/mirserver/miral/mirbuffer.cpp
@@ -18,19 +18,58 @@
 
 #include <mir/graphics/buffer.h>
 #include "mir/graphics/texture.h"
+#include <mir/renderer/gl/texture_source.h>
 
 #include <stdexcept>
 
+#include <QDebug>
+
 miral::GLBuffer::GLBuffer() = default;
-miral::GLBuffer::~GLBuffer() = default;
+miral::GLBuffer::~GLBuffer()
+{
+    destroy();
+}
+
 miral::GLBuffer::GLBuffer(std::shared_ptr<mir::graphics::Buffer> const& buffer) :
-    wrapped(buffer)
+    wrapped(buffer),
+    m_textureId(0),
+    m_isOldTex(false)
+{
+    init();
+}
+
+void miral::GLBuffer::init()
+{
+    if (m_inited)
+        return;
+
+    if (!dynamic_cast<mir::graphics::gl::Texture*>(wrapped->native_buffer_base()))
+    {
+        qWarning("IS OLD TEX");
+        glGenTextures(1, &m_textureId);
+        m_isOldTex = true;
+        
+    } else {
+        qWarning("IS NEW TEX");
+    }
+
+    m_inited = true;
+}
+
+void miral::GLBuffer::destroy()
 {
+    qWarning("destroy");
+    if (m_textureId) {
+        glDeleteTextures(1, &m_textureId);
+        m_textureId = 0;
+        m_isOldTex = false;
+    }
 }
 
 void miral::GLBuffer::reset(std::shared_ptr<mir::graphics::Buffer> const& buffer)
 {
     wrapped = buffer;
+    init();
 }
 
 miral::GLBuffer::operator bool() const
@@ -55,14 +94,35 @@ void miral::GLBuffer::reset()
     wrapped.reset();
 }
 
+void miral::GLBuffer::gl_bind_tex()
+{
+    if (m_isOldTex)
+        glBindTexture(GL_TEXTURE_2D, m_textureId);
+}
+
 void miral::GLBuffer::bind()
 {
+    if (!wrapped) {
+        qWarning("Bind called without any buffers!");
+    }
+
+    if (m_isOldTex) {
+        auto const texsource = dynamic_cast<mir::renderer::gl::TextureSource*>(wrapped->native_buffer_base());
+
+        texsource->gl_bind_to_texture();
+        texsource->secure_for_render();
+     //   glPixelStorei(GL_UNPACK_ALIGNMENT, 4); 
+
+        return;
+    }
+
     if (auto const texture = dynamic_cast<mir::graphics::gl::Texture*>(wrapped->native_buffer_base()))
     {
         texture->bind();
     }
     else
     {
-        throw std::logic_error("Buffer does not support GL rendering");
+        qWarning("Bind called without any valid buffers!");
+        //throw std::logic_error("Buffer does not support GL rendering");
     }
 }
diff --git a/src/platforms/mirserver/miral/mirbuffer.h b/src/platforms/mirserver/miral/mirbuffer.h
index cabfdc36..fb9acae0 100644
--- a/src/platforms/mirserver/miral/mirbuffer.h
+++ b/src/platforms/mirserver/miral/mirbuffer.h
@@ -21,6 +21,8 @@
 
 #include <memory>
 
+#include <GL/gl.h>
+
 namespace mir { namespace graphics { class Buffer; }}
 
 namespace miral
@@ -39,9 +41,16 @@ public:
     void reset();
     void reset(std::shared_ptr<mir::graphics::Buffer> const& buffer);
     void bind();
+    void gl_bind_tex();
 
 private:
+    void init();
+    void destroy();
+
     std::shared_ptr<mir::graphics::Buffer> wrapped;
+    GLuint m_textureId;
+    bool m_isOldTex = false;
+    bool m_inited = false;
 };
 }
 
-- 
2.25.1

